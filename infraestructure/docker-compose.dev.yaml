services:
  db:
    image: postgres:13
    container_name: postgres_db
    restart: unless-stopped
    env_file: ../.env
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DATABASE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 30

  app_config: &app_config
    build:
      context: ../
      dockerfile: Dockerfile
    env_file: ../.env
    environment:
      - PG_HOST=db
      - PG_PORT=${PG_PORT}
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_DATABASE=${PG_DATABASE}
    volumes:
      - ../:/app

  migrate:
    <<: *app_config
    container_name: blog-migrate
    command: npm run migrate
    depends_on:
      db:
        condition: service_healthy
    restart: "no"

  app:
    <<: *app_config
    container_name: blog
    restart: unless-stopped
    depends_on:
      - migrate
      - db
    ports:
      - "3000:3000"

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app

volumes:
  postgres_data:
